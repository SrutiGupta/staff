datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model Staff {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String?
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[]
  invoices    Invoice[]
}

model Attendance {
  id         Int       @id @default(autoincrement())
  staff      Staff     @relation(fields: [staffId], references: [id])
  staffId    Int
  loginTime  DateTime  @default(now())
  logoutTime DateTime?
}

model Patient {
  id             Int            @id @default(autoincrement())
  name           String
  age            Int
  gender         String
  phone          String?
  address        String?
  medicalHistory String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  royalty        Royalty?
  giftCards      GiftCard[]
  invoices       Invoice[]
  prescriptions  Prescription[]
}

// NEW: Model for walk-in customers
model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String?
  address   String    // Crucial for hotspot analysis
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoices  Invoice[]
}

model Royalty {
  id        Int      @id @default(autoincrement())
  points    Int      @default(0)
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GiftCard {
  id           Int           @id @default(autoincrement())
  code         String        @unique
  balance      Float
  patient      Patient       @relation(fields: [patientId], references: [id])
  patientId    Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Company {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  barcode      String?       @unique
  
  // Eyewear categorization
  eyewearType  EyewearType   // GLASSES, SUNGLASSES, LENSES
  frameType    FrameType?    // RECTANGULAR, OVAL, ROUND, etc. (null for lenses)
  
  // Company/Brand information
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    Int
  
  // Additional product attributes
  material     String?       // Frame material (metal, plastic, etc.)
  color        String?       // Frame color
  size         String?       // Frame size (S, M, L or specific measurements)
  model        String?       // Model number/name
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  inventory    Inventory[]
  invoiceItems InvoiceItem[]
}

enum EyewearType {
  GLASSES
  SUNGLASSES
  LENSES
}

enum FrameType {
  RECTANGULAR
  OVAL
  ROUND
  SQUARE
  AVIATOR
  WAYFARER
  CAT_EYE
  CLUBMASTER
  RIMLESS
  SEMI_RIMLESS
  WRAP_AROUND
}

model Inventory {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @unique
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id             String        @id @default(cuid())

  // An invoice can be for a Patient OR a Customer, so both are optional.
  patient        Patient?      @relation(fields: [patientId], references: [id])
  patientId      Int?
  customer       Customer?     @relation(fields: [customerId], references: [id])
  customerId     Int?

  staff          Staff         @relation(fields: [staffId], references: [id])
  staffId        Int
  subtotal       Float
  totalDiscount  Float         @default(0)
  totalIgst      Float         @default(0)
  totalCgst      Float         @default(0)
  totalSgst      Float         @default(0)
  totalAmount    Float
  paidAmount     Float         @default(0)
  status         String        @default("UNPAID")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  items          InvoiceItem[]
  transactions   Transaction[]
  prescriptionId Int?          @unique
  prescription   Prescription? @relation(fields: [prescriptionId], references: [id])
}

model InvoiceItem {
  id         Int     @id @default(autoincrement())
  invoice    Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId  String
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
  unitPrice  Float
  discount   Float   @default(0)
  cgst       Float   @default(0)
  sgst       Float   @default(0)
  totalPrice Float
}

model Transaction {
  id            Int       @id @default(autoincrement())
  invoice       Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId     String
  amount        Float
  paymentMethod String
  createdAt     DateTime  @default(now())
  giftCard      GiftCard? @relation(fields: [giftCardId], references: [id])
  giftCardId    Int?
}

model Prescription {
  id        Int      @id @default(autoincrement())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
  rightEye  Json     // {"sph": "-1.50", "cyl": "0.00", ...}
  leftEye   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoice   Invoice?
}
