datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

// ================================
// SHOP ADMIN MODELS
// ================================

model ShopAdmin {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String
  password    String
  role        AdminRole @default(SHOP_OWNER)
  shopId      Int
  shop        Shop     @relation(fields: [shopId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Audit trails
  auditLogs      AuditLog[]
  reports        Report[]
  stockMovements StockMovement[]
  verifiedReceipts StockReceipt[] @relation("VerifiedByAdmin")
}

model Shop {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  phone       String?
  email       String?
  licenseNo   String?
  gstNo       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  admins        ShopAdmin[]
  staff         Staff[]
  inventory     ShopInventory[]
  stockReceipts StockReceipt[]
  patients      Patient[]
  customers     Customer[]

  // Business settings
  lowStockThreshold Int @default(10)
  currency          String @default("INR")
  timezone          String @default("Asia/Kolkata")
}

enum AdminRole {
  SHOP_OWNER
  MANAGER
  SUPERVISOR
}

model Staff {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String?
  password    String
  shopId      Int          @default(1)
  shop        Shop         @relation(fields: [shopId], references: [id])
  role        StaffRole    @default(SALES_STAFF)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  attendances     Attendance[]
  invoices        Invoice[]
  stockMovements  StockMovement[]
  patientVisits   PatientVisit[]
  stockReceipts   StockReceipt[] @relation("ReceivedByStaff")
}

enum StaffRole {
  SALES_STAFF
  CASHIER
  INVENTORY_MANAGER
  OPTOMETRIST
}

// ================================
// AUDIT & REPORTING MODELS
// ================================

model AuditLog {
  id          Int      @id @default(autoincrement())
  adminId     Int
  admin       ShopAdmin @relation(fields: [adminId], references: [id])
  action      String
  targetType  String
  targetId    String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
}

model Report {
  id          Int      @id @default(autoincrement())
  adminId     Int
  admin       ShopAdmin @relation(fields: [adminId], references: [id])
  reportType  ReportType
  title       String
  description String?
  filters     Json?
  data        Json
  generatedAt DateTime @default(now())
  expiresAt   DateTime?
}

enum ReportType {
  DAILY_SALES
  MONTHLY_SALES
  STAFF_ATTENDANCE
  INVENTORY_AUDIT
  PATIENT_SUMMARY
  PRODUCT_PERFORMANCE
  STOCK_MOVEMENT
  REVENUE_ANALYSIS
}

// ================================
// SECURE INVENTORY WORKFLOW MODELS
// ================================


// ❌ DELETE LEGACY INVENTORY MODEL
// model Inventory { ... }

// ✅ NEW: Stock Receipt Model (Staff creates, Admin approves)
model StockReceipt {
  id                Int               @id @default(autoincrement())
  shopId            Int
  shop              Shop              @relation(fields: [shopId], references: [id])
  productId         Int
  product           Product           @relation(fields: [productId], references: [id])

  // Receipt Details
  receivedQuantity  Int               // What staff says they received
  verifiedQuantity  Int?              // What admin verified (after physical check)

  // Staff Information (Who received)
  receivedByStaffId Int
  receivedByStaff   Staff             @relation("ReceivedByStaff", fields: [receivedByStaffId], references: [id])
  receivedAt        DateTime          @default(now())

  // Admin Information (Who verified)
  verifiedByAdminId Int?
  verifiedByAdmin   ShopAdmin?        @relation("VerifiedByAdmin", fields: [verifiedByAdminId], references: [id])
  verifiedAt        DateTime?

  // Status & Tracking
  status            ReceiptStatus     @default(PENDING)
  supplierName      String?           // Where it came from
  deliveryNote      String?           // Delivery reference
  batchNumber       String?           // Product batch
  expiryDate        DateTime?         // For items with expiry

  // Admin Notes
  adminNotes        String?           // Discrepancy notes
  discrepancyReason String?           // Why quantities differ

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum ReceiptStatus {
  PENDING           // Staff created, waiting admin verification
  APPROVED          // Admin approved, ready for staff to stock-in
  REJECTED          // Admin rejected, no further action possible
  COMPLETED         // Staff has stocked-in the product, inventory updated
  CANCELLED         // Staff cancelled before admin approval
}

// ✅ ENHANCED: Shop Inventory Model
model ShopInventory {
  id              Int             @id @default(autoincrement())
  shopId          Int
  shop            Shop            @relation(fields: [shopId], references: [id])
  productId       Int
  product         Product         @relation(fields: [productId], references: [id])
  quantity        Int             @default(0)

  // Stock Management
  minThreshold    Int             @default(10)
  maxThreshold    Int             @default(100)
  reorderLevel    Int             @default(20)

  // Pricing (Admin controlled)
  costPrice       Float?          // Purchase cost from retailer
  sellingPrice    Float?          // Shop-specific pricing override

  // Supplier & Batch Tracking
  supplier        String?         // Primary supplier
  lastRestockedAt DateTime?       // Last time stock was added
  lastSoldAt      DateTime?       // Last sale timestamp

  // Audit Trail
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  stockMovements  StockMovement[]

  @@unique([shopId, productId])
}

// ✅ ENHANCED: Stock Movement Model (Complete Audit Trail)
model StockMovement {
  id                Int           @id @default(autoincrement())
  shopInventoryId   Int
  shopInventory     ShopInventory @relation(fields: [shopInventoryId], references: [id])

  // Movement Details
  type              MovementType
  quantity          Int
  previousQty       Int
  newQty            Int

  // Who & When
  staffId           Int?
  staff             Staff?        @relation(fields: [staffId], references: [id])
  adminId           Int?
  admin             ShopAdmin?    @relation(fields: [adminId], references: [id])

  // Reference Information
  reason            String?       // "STOCK_IN", "SALE", "DAMAGE", "RETURN", "ADJUSTMENT"
  invoiceId         String?       // Link to sale invoice if type is STOCK_OUT
  stockReceiptId    Int?          // Link to stock receipt if type is STOCK_IN

  // Additional Details
  supplierName      String?       // For STOCK_IN movements
  batchNo           String?
  expiryDate        DateTime?
  notes             String?

  createdAt         DateTime      @default(now())
}

// ✅ UPDATE: Enhanced Movement Types
enum MovementType {
  STOCK_IN          // From approved stock receipt
  STOCK_OUT         // From sales
  ADJUSTMENT        // Admin manual adjustment
  DAMAGE            // Damaged goods removal
  RETURN            // Customer returns
  TRANSFER_OUT      // Transfer to another shop
  TRANSFER_IN       // Transfer from another shop
  LOSS              // Theft/loss write-off
  RECOUNT           // Physical count adjustment
}


// ================================
// BUSINESS ANALYTICS MODELS
// ================================

model DailySummary {
  id              Int      @id @default(autoincrement())
  shopId          Int
  date            DateTime @db.Date
  totalSales      Float    @default(0)
  totalOrders     Int      @default(0)
  totalCustomers  Int      @default(0)
  totalPatients   Int      @default(0)
  staffCount      Int      @default(0)
  avgOrderValue   Float    @default(0)
  topProduct      String?
  topProductSales Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([shopId, date])
}

model ProductPerformance {
  id            Int      @id @default(autoincrement())
  productId     Int
  product       Product  @relation(fields: [productId], references: [id])
  shopId        Int
  month         DateTime @db.Date
  unitsSold     Int      @default(0)
  revenue       Float    @default(0)
  profit        Float    @default(0)
  avgSellingPrice Float  @default(0)
  returnCount   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([productId, shopId, month])
}

// ================================
// EXISTING MODELS
// ================================

model Attendance {
  id         Int       @id @default(autoincrement())
  staff      Staff     @relation(fields: [staffId], references: [id])
  staffId    Int
  loginTime  DateTime  @default(now())
  logoutTime DateTime?
}

model Patient {
  id             Int            @id @default(autoincrement())
  name           String
  age            Int
  gender         String
  phone          String?
  address        String?
  medicalHistory String?
  shopId         Int            @default(1)
  shop           Shop           @relation(fields: [shopId], references: [id])
  isActive       Boolean        @default(true)
  lastVisit      DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  royalty        Royalty?
  giftCards      GiftCard[]
  invoices       Invoice[]
  prescriptions  Prescription[]
  visits         PatientVisit[]
}

model PatientVisit {
  id          Int      @id @default(autoincrement())
  patientId   Int
  patient     Patient  @relation(fields: [patientId], references: [id])
  staffId     Int
  staff       Staff    @relation(fields: [staffId], references: [id])
  visitType   VisitType
  notes       String?
  followUpDate DateTime?
  visitDate   DateTime @default(now())
  createdAt   DateTime @default(now())
}

enum VisitType {
  CONSULTATION
  FOLLOW_UP
  FRAME_SELECTION
  LENS_FITTING
  PICKUP
  REPAIR
  OTHER
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String?
  address   String
  shopId    Int       @default(1)
  shop      Shop      @relation(fields: [shopId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoices  Invoice[]
}

model Royalty {
  id        Int      @id @default(autoincrement())
  points    Int      @default(0)
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GiftCard {
  id           Int           @id @default(autoincrement())
  code         String        @unique
  balance      Float
  patient      Patient       @relation(fields: [patientId], references: [id])
  patientId    Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Company {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  basePrice    Float         // Retailer's base price (not shop selling price)
  barcode      String?       @unique
  sku          String?       @unique

  // Eyewear categorization
  eyewearType  EyewearType
  frameType    FrameType?

  // Company/Brand information
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    Int

  // Additional attributes
  material     String?
  color        String?
  size         String?
  model        String?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relationships
  invoiceItems   InvoiceItem[]
  shopInventory  ShopInventory[]
  stockReceipts  StockReceipt[]
  performance    ProductPerformance[]
}

enum EyewearType {
  GLASSES
  SUNGLASSES
  LENSES
}

enum FrameType {
  RECTANGULAR
  OVAL
  ROUND
  SQUARE
  AVIATOR
  WAYFARER
  CAT_EYE
  CLUBMASTER
  RIMLESS
  SEMI_RIMLESS
  WRAP_AROUND
}

model Invoice {
  id             String        @id @default(cuid())
  patient        Patient?      @relation(fields: [patientId], references: [id])
  patientId      Int?
  customer       Customer?     @relation(fields: [customerId], references: [id])
  customerId     Int?

  staff          Staff         @relation(fields: [staffId], references: [id])
  staffId        Int
  subtotal       Float
  totalDiscount  Float         @default(0)
  totalIgst      Float         @default(0)
  totalCgst      Float         @default(0)
  totalSgst      Float         @default(0)
  totalAmount    Float
  paidAmount     Float         @default(0)
  status         String        @default("UNPAID")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  items          InvoiceItem[]
  transactions   Transaction[]
  prescriptionId Int?          @unique
  prescription   Prescription? @relation(fields: [prescriptionId], references: [id])
}

model InvoiceItem {
  id         Int     @id @default(autoincrement())
  invoice    Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId  String
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
  unitPrice  Float
  discount   Float   @default(0)
  cgst       Float   @default(0)
  sgst       Float   @default(0)
  totalPrice Float
}

model Transaction {
  id            Int       @id @default(autoincrement())
  invoice       Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId     String
  amount        Float
  paymentMethod String
  createdAt     DateTime  @default(now())
  giftCard      GiftCard? @relation(fields: [giftCardId], references: [id])
  giftCardId    Int?
}

model Prescription {
  id        Int      @id @default(autoincrement())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
  rightEye  Json
  leftEye   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoice   Invoice?
}
